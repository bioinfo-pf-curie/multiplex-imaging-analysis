/*
 * Define modules options
 */


process {

  // Default
  //publishDir = [
  //  path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
  //  mode: 'copy',
  //  saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //]

  withName:'splitImage' {
     ext.args = addParms(params.segmentation.overlap, "overlap") + addParms(params.segmentation.tileHeight, "height")
  }

  withName:'pyramidize' {
    publishDir = [
      path: { "${params.outDir}/${tag}/" },
      mode: 'copy',
    ]
  }

  withName:'computeMasks' {
    ext.args = addParms(params.masks.overlap, "overlap")
    withLabel: 'img_utils' {queue = "dev_gpu"}
  }
 
  withName:'stitch' {
    publishDir = [
      path: { "${params.outDir}/masks/" },
      mode: 'copy',
      pattern: "*_masks.ti{f,ff}"
    ]
    ext.args = addParms(params.segmentation.overlap, "overlap")
  }

  withName:'quantification' {
    publishDir = [
      path: { "${params.outDir}/quantification/" },
      mode: 'copy',
      pattern: "*.csv",
      saveAs: { filename -> "${meta.originalName}_data.csv" }
    ]

    ext.args = addParms(params.quantification.normalization, "normalize")
  }

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

  withName:'qc' {
    publishDir = [
      path: { "${params.outDir}/quantification/" },
      mode: 'copy',
      pattern: "*.csv",
    ]
    ext.when = params.qualityControl.any { it.value != null }
    ext.args = addParms(params.qualityControl.areaMin, "area_min") + addParms(params.qualityControl.areaMax, "area_max") + addParms(params.qualityControl.necroticIntensityTreshold, "necrotic_intensity_treshold")
  }

  withName:'mask2geojson' {
    publishDir = [
      path: { "${params.outDir}/quantification/" },
      mode: 'copy',
      pattern: "*.geojson",
    ]
    ext.when = (params.outline == "none") | params.makeGeoJson
  } 
  
  withName:'displayOutline' {
    ext.when = params.outline != "none"
  }

  withName:'mergeChannels' {
    ext.args = addParms(params.normalization.mode, "norm")
  }

  withName:'seg' {
    params.containers.specificBinds = "\$PWD:~/.cellpose,"
    // ext.args = params.segmentation.additionalParms ? "$params.segmentation.additionalParms" : "" 
  }

  withName:'mergeMasks' {
    publishDir = [
      path: { "${params.outDir}/masks/" },
      mode: 'copy',
      pattern: "*_masks.ti{f,ff}"
    ]
    ext.args = addParms(params.masks.overlap, "overlap") + addParms(params.mergeMasks.chunksize, "chunk_size") + addParms(params.mergeMasks.threshold, "threshold")
  }


}

def addParms(prms, opt) {
  return prms != null ? " --$opt $prms" : ""
}